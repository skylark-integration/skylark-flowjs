{"version":3,"sources":["utils.js"],"names":["define","langx","flowjs","each","obj","callback","context","key","length","call","hasOwnProperty","arrayRemove","array","value","index","indexOf","splice","evalOpts","data","args","Array","prototype","slice","arguments","apply","async","fn","setTimeout","bind","extend","dst","src"],"mappings":";;;;;;;AAAAA,QACE,sBACA,YACA,SAASC,EAAMC,GAiEf,SAASC,EAAKC,EAAKC,EAAUC,GAI3B,IAAIC,EAHJ,GAAKH,EAML,QAA2B,IAAhBA,EAAU,QACnB,IAAKG,EAAM,EAAGA,EAAMH,EAAII,OAAQD,IAC9B,IAA8C,IAA1CF,EAASI,KAAKH,EAASF,EAAIG,GAAMA,GACnC,YAIJ,IAAKA,KAAOH,EACV,GAAIA,EAAIM,eAAeH,KAAkD,IAA1CF,EAASI,KAAKH,EAASF,EAAIG,GAAMA,GAC9D,OAMR,OACCI,YAjFD,SAAqBC,EAAOC,GAC1B,IAAIC,EAAQF,EAAMG,QAAQF,GACtBC,GAAS,GACXF,EAAMI,OAAOF,EAAO,IA+EvBG,SArED,SAAkBC,EAAMC,GAMtB,MALoB,mBAATD,IAETC,EAAOC,MAAMC,UAAUC,MAAMb,KAAKc,WAClCL,EAAOA,EAAKM,MAAM,KAAML,EAAKG,MAAM,KAE9BJ,GAgERO,MAvDD,SAAeC,EAAIpB,GACjBqB,WAAWD,EAAGE,KAAKtB,GAAU,IAuD9BuB,OA5CD,SAAgBC,EAAKC,GAQnB,OAPA5B,EAAKoB,UAAW,SAASnB,GACnBA,IAAQ0B,GACV3B,EAAKC,EAAK,SAASS,EAAON,GACxBuB,EAAIvB,GAAOM,MAIViB,GAqCR3B,KAAAA","file":"../utils.js","sourcesContent":["define([\r\n  \"skylark-langx/langx\",\r\n  \"./flowjs\"\r\n],function(langx,flowjs){\r\n\r\n  /**\r\n   * Remove value from array\r\n   * @param array\r\n   * @param value\r\n   */\r\n  function arrayRemove(array, value) {\r\n    var index = array.indexOf(value);\r\n    if (index > -1) {\r\n      array.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * If option is a function, evaluate it with given params\r\n   * @param {*} data\r\n   * @param {...} args arguments of a callback\r\n   * @returns {*}\r\n   */\r\n  function evalOpts(data, args) {\r\n    if (typeof data === \"function\") {\r\n      // `arguments` is an object, not array, in FF, so:\r\n      args = Array.prototype.slice.call(arguments);\r\n      data = data.apply(null, args.slice(1));\r\n    }\r\n    return data;\r\n  }\r\n\r\n\r\n  /**\r\n   * Execute function asynchronously\r\n   * @param fn\r\n   * @param context\r\n   */\r\n  function async(fn, context) {\r\n    setTimeout(fn.bind(context), 0);\r\n  }\r\n\r\n  /**\r\n   * Extends the destination object `dst` by copying all of the properties from\r\n   * the `src` object(s) to `dst`. You can specify multiple `src` objects.\r\n   * @function\r\n   * @param {Object} dst Destination object.\r\n   * @param {...Object} src Source object(s).\r\n   * @returns {Object} Reference to `dst`.\r\n   */\r\n  function extend(dst, src) {\r\n    each(arguments, function(obj) {\r\n      if (obj !== dst) {\r\n        each(obj, function(value, key){\r\n          dst[key] = value;\r\n        });\r\n      }\r\n    });\r\n    return dst;\r\n  }\r\n\r\n  /**\r\n   * Iterate each element of an object\r\n   * @function\r\n   * @param {Array|Object} obj object or an array to iterate\r\n   * @param {Function} callback first argument is a value and second is a key.\r\n   * @param {Object=} context Object to become context (`this`) for the iterator function.\r\n   */\r\n  function each(obj, callback, context) {\r\n    if (!obj) {\r\n      return ;\r\n    }\r\n    var key;\r\n    // Is Array?\r\n    // Array.isArray won't work, not only arrays can be iterated by index https://github.com/flowjs/ng-flow/issues/236#\r\n    if (typeof(obj.length) !== 'undefined') {\r\n      for (key = 0; key < obj.length; key++) {\r\n        if (callback.call(context, obj[key], key) === false) {\r\n          return ;\r\n        }\r\n      }\r\n    } else {\r\n      for (key in obj) {\r\n        if (obj.hasOwnProperty(key) && callback.call(context, obj[key], key) === false) {\r\n          return ;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  return {\r\n  \tarrayRemove,\r\n  \tevalOpts,\r\n  \tasync,\r\n  \textend,\r\n  \teach\r\n  } ;\r\n\r\n});"]}